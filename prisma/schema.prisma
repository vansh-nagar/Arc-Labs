// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?

  credits       Int       @default(0)

  accounts      Account[]
  sessions      Session[]
  projects      Projects[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}
 
 enum LinkPermissionType  {
    VIEW
    EDIT
    LOCKED
 }

model Projects {
  id                  String @id @default(cuid())
  name                String
  image               String?
  html                String @db.Text
  

  userId              String
  user       User     @relation(fields: [userId]  , references: [id], onDelete: Cascade)

  viewCount  Int      @default(0)
  locked     Boolean  @default(true)

  linkPermissionType  LinkPermissionType  @default(LOCKED) 
  specialPermissions  SpecialPermission[]
  
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

enum PermissionType {
  VIEW
  EDIT
}


model SpecialPermission {
  id        String    @id @default(cuid())
  userEmail String
  permissionType      PermissionType @default(VIEW) 

  projectId String
  project   Projects  @relation(fields: [projectId] , references: [id] , onDelete: Cascade)

  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}